/**
 * Класс Subject представляет объект, значение которого может быть изменено,
 * и к нему можно подписаться, чтобы получать уведомления об изменении значения.
 * @class
 */
export class Subject {
  /**
   * Создает новый экземпляр класса Subject.
   * @param {*} value Изначальное значение объекта.
   */
  constructor(value) {
    /**
     * Значение объекта.
     * @type {*}
     */
    this.value = value;
    /**
     * Список подписчиков в виде объекта Set. Каждый элемент Set
     * должен быть функцией обратного вызова (listener), которая
     * будет вызвана при изменении значения объекта.
     * @type {Set.<Function>}
     */
    this.listeners = new Set();
  }

  /**
   * Возвращает текущее значение объекта.
   * @return {*} Значение объекта.
   */
  get() {
    return this.value;
  }

  /**
   * Устанавливает значение объекта и уведомляет всех подписчиков об изменении.
   * @param {*} value Новое значение объекта.
   */
  set(value) {
    this.value = value;
    this._notify();
  }

  /**
   * Добавляет слушателя (подписчика) на изменение значения объекта.
   * @param {Function} listener Функция обратного вызова, которая будет вызвана при изменении значения объекта.
   * @return {Function} Функция, которая используется для удаления слушателя из списка подписчиков.
   */
  subscribe(listener) {
    this.listeners.add(listener);

    return () => this.listeners.delete(listener);
  }

  /**
   * Вызывает функцию обратного вызова (listener) у каждого подписчика
   * для уведомления об изменении значения объекта.
   * @private
   */
  _notify() {
    this.listeners.forEach((listener) => listener());
  }
}
